clear all
clc
close all
%% Script for checking the mean density of a network generated by N Voronoi geometries
%
%   Author: Simone Di Gregorio
%   Politecnico di Milano, 10/07/2017
%   Contact: simone.digre@gmail.com  
%%
N_geo=99;
N_reti=18; % number of Voronoi geometries to insert
d=5E-4;

fileName = sprintf('RETI_FINALI.txt');
good_network_struct = importdata(fileName);
good_networks=good_network_struct.data;

for k=1:100
    
    starting_radius=[4 4.25 4.5]; 
    n_good=zeros(N_geo+1,3); %number of good networks for each geometry
    nr_good=zeros(size(starting_radius,2),1); %number of good networks for each starting radius
    buone=0;
    n_r=0;
    selezionate=[];

%check how many networks are good for each starting_radius
    for raggi_in=1:3
            for check=1:size(good_networks,1)
                if good_networks(check,1)==starting_radius(raggi_in)
                nr_good(raggi_in)=nr_good(raggi_in)+1;
                end
            end
    end

a=1;
for r=1:size(starting_radius,2)
    for geo=0:N_geo
        for check=a:(nr_good(r)+a-1)
            if good_networks(check,2)==geo
            n_good(geo+1,r)=n_good(geo+1,r)+1;
            no_zero=1;
            end
        end
    end
    a=a+nr_good(r);
end

starting_radius_selection=randi([1,3],N_reti); %choose n_reti values for starting_radius

for i=1:N_reti
      ok=0;

      
    while ~ok
              ok_first=0;
    geometrie(i)=(randi([1,N_geo+1],1));
        if n_good(geometrie(i),starting_radius_selection(i))~=0
            ok_first=1;
        end
        
% % %         TROVARE GEOMETRIE DIVERSE
        j=1;
        trovato_uguale=0;
        if ok_first
            while j<i && ~trovato_uguale
                if geometrie(i)==geometrie(j)
                    trovato_uguale=1;
                end
                j=j+1;
            end
        end
        ok=~trovato_uguale && ok_first;
% % %  FINE TROVARE GEOMETRIE DIVERSE
    end
    
end

%%% SE VUOI AVERE GEOEMTRIE UGUALI, MA ALMENO RAGGI DIVERSI
% % for i=1:n_reti
% % position(i)=1;
% % trovato=0;
% % % different=0;
% % %     while~different
% %         while ~trovato
% %             if reti_buone(position(i),1)==raggi_iniziali(raggi_part(i))
% %                 trovato=1;
% %             else
% %                 position(i)=position(i)+1;
% %             end
% %         end
% %      trovato_geo=0;  
% %          while ~trovato_geo
% %             if reti_buone(position(i),2)==geometrie(i)-1
% %                 trovato_geo=1;
% %             else
% %                 position(i)=position(i)+1;
% %             end
% %          end
% % 
% %          iterazione(i)=randi([1,n_good(geometrie(i),raggi_part(i))],1);
% %          position(i)=position(i)+iterazione(i);
% % %          for j=1:i
% % %              if position(i)==position(j) && i~=j
% % %                  different=0;
% % %              else
% % %                  different=1;
% % %              end
% % %          end
% % %     end
% % end 

% % %  SE VUOI POTER AVERE ANCHE LA STESSA GEOEMTRIA CON LO STESSO RAGGIO,
% OPPURE SE HAI GIA' CONTROLLATO CHE LA GEOMETRIA E' DIVERSA
    for i=1:N_reti
    position(i)=1;
    trovato=0;
            while ~trovato
                if good_networks(position(i),1)==starting_radius(starting_radius_selection(i))
                    trovato=1;
                else
                    position(i)=position(i)+1;
                end
            end
    trovato_geo=0;
             while ~trovato_geo
                if good_networks(position(i),2)==geometrie(i)-1
                    trovato_geo=1;
                else
                    position(i)=position(i)+1;
                end
             end

             iterazione(i)=randi([1,n_good(geometrie(i),starting_radius_selection(i))],1);
             position(i)=position(i)+iterazione(i);

    end 

Total_surface_area=0;

    for i=1:N_reti
        Total_surface_area=Total_surface_area+good_networks(position(i),end);
    end

    density(k)=Total_surface_area*2*pi/d*1E-6/d;

end

average_density=mean(density);
sd_density=std(density);
histogram(density)
normalize_density=(density-average_density)/sd_density;
norm_dens=kstest(normalize_density)
